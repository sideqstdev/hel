# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

enum AccountResponseCode {
  DUPLICATE
  ERROR
  INVALID
  SUCCESS
}

type Application {
  applied: Boolean!
  coverLetter: String!
  dateApplied: DateTime
  dateStarted: DateTime
  id: String!
  job: Job!
  resume: File
  user: User!
}

type Company {
  companySize: CompanySize
  employeeCount: Float!
  id: String!
  jobs: [Job!]!
  linkedin: String
  location: String!
  name: String!
  owner: User
  sector: String!
  twitter: String
  website: String
}

enum CompanySize {
  ENTERPRISE
  LARGE_HIGH
  LARGE_LOW
  MEDIUM_HIGH
  MEDIUM_LOW
  MICRO
  NONE
  SMALL
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

enum Experience {
  ASSOCIATE
  ENTRY
  EXECUTIVE
  JUNIOR
  SENIOR
}

type File {
  created: DateTime!

  """The uri at which this file exists on the internet."""
  uri: String!
}

type Image {
  """The date at which image was created."""
  created: DateTime!

  """The height of the image asset."""
  height: Float!

  """The uri at which this asset exists on the internet."""
  uri: String!

  """The width of the image asset."""
  width: Float!
}

type Job {
  applicants: Float
  applications: [Application!]!
  company: Company
  currency: String
  description: String!
  experience: Experience!
  id: String!
  location: String!
  offSiteApp: Boolean!
  offSiteLink: String!
  posted: DateTime
  promoted: Boolean!
  salaryCeiling: Float
  salaryFloor: Float
  title: String!
  type: JobType!
  updated: DateTime
}

enum JobType {
  ADMIN
  ANALYSIS
  BIZDEV
  COMMUNITY
  CUSTOMER
  DESIGN
  DEVELOPMENT
  DEVOPS
  FINANCE
  GAME_DEVELOPMENT
  GAME_MANAGEMENT
  HR
  LOGISTICS
  MARKETING
  MUSIC
  PROJECT
  PUBLIC_SPEAKING
  QA
  RECRUITING
  RESEARCH
  SERVICE
  SOCIAL_MEDIA
  TEACHING
  VIDEO_EDITING
  VIDEO_PRODUCTION
  WEB
  WRITING
}

type MailingList {
  created: DateTime!

  """Email address for hearing more about sideqst"""
  email: String!
}

type Mutation {
  confirmAccount(input: confirmAccountInput!): confirmAccountResponse!
  createAccount(input: createAccountInput!): createAccountResponse!
  loginAccount(input: loginAccountInput!): loginAccountResponse!
  mailingList(input: mailingListInput!): mailingListResponse!
}

type Post {
  content: String!
  created: DateTime!
  id: String!
  impressions: Int
  likes: Int
  tags: [String!]!
  updated: DateTime!
  user: User!
}

type Query {
  status: String!
}

type User {
  activated: Boolean
  applications: [Application!]
  avatar: Image
  bio: String
  companies: [Company!]
  created: DateTime
  dob: DateTime
  email: String!
  emailCode: String
  firstName: String
  id: String!
  industry: String
  jobs: [Job!]
  lastLogin: DateTime
  lastName: String
  linkedin: String
  links: [String!]
  posts: [Post!]
  saved: [Job!]
  twitter: String
  updated: DateTime
  username: String!
  verified: Boolean
  version: Float
  website: String
}

input confirmAccountInput {
  code: String!
  userId: String
}

type confirmAccountResponse {
  """Redirect url to users account"""
  redirect: String

  """
  Whether or not the code was successful in confirming the account creation
  """
  success: Boolean
}

input createAccountInput {
  email: String!
  industry: [JobType!]
  password: String!
  username: String!
}

type createAccountResponse {
  created: Boolean!
  details: String!
  responseCode: AccountResponseCode!
  user: User
}

input loginAccountInput {
  email: String!
  password: String!
}

type loginAccountResponse {
  details: String!

  """Notices for the account in question"""
  notices: String
  success: Boolean!
  user: User
}

input mailingListInput {
  """Email address for signing up for the mailing list for sideqst"""
  email: String!
}

type mailingListResponse {
  submitted: Boolean!
}
